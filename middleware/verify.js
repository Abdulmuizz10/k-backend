// import jwt from "jsonwebtoken";

// const verifyUser = (req, res, next) => {
//   const authHeader = req.headers.token;
//   const customToken = authHeader.length < 500;
//   let tokenData;
//   if (authHeader) {
//     const token = authHeader.split(" ")[1];
//     try {
//       if (token && customToken) {
//         tokenData = jwt.verify(token, process.env.SECRET_KEY);
//         req.user = tokenData;
//       } else {
//         tokenData = jwt.decode(token);
//         req.user = tokenData;
//       }
//       next();
//     } catch (error) {
//       res
//         .status(404)
//         .json({ message: `${error.message}, Token is not valid ` });
//     }
//   } else {
//     res.status(501).json({ message: "You are not authenticated" });
//   }
// };

// const authorizeAdmin = (req, res, next) => {
//   if (req.user && req.user.isAdmin) {
//     next();
//   } else {
//     res.status(401).json({ message: "not authorized as an admin" });
//   }
// };
// export { verifyUser, authorizeAdmin };

import jwt from "jsonwebtoken";
import { OAuth2Client } from "google-auth-library";

// Initialize Google OAuth client
const client = new OAuth2Client(process.env.GOOGLE_CLIENT_ID);

const verifyUser = async (req, res, next) => {
  const authHeader = req.headers.token;

  // Check if token exists in the headers
  if (!authHeader) {
    return res.status(501).json({ message: "You are not authenticated" });
  }

  // Extract the token from the authorization header
  const token = authHeader.split(" ")[1];

  // Check if the token length is less than 500 (this indicates it's a custom JWT token)
  const isCustomToken = token.length < 500;

  let tokenData;

  try {
    if (token && isCustomToken) {
      // Verify custom JWT token (generated by your server)
      tokenData = jwt.verify(token, process.env.SECRET_KEY);
      req.user = tokenData;
      // Attach user data to the request object
    } else {
      // If it's a Google OAuth token, verify it using Google's public keys
      const ticket = await client.verifyIdToken({
        idToken: token,
        audience: process.env.GOOGLE_CLIENT_ID, // Google Client ID
      });
      tokenData = ticket.getPayload(); // Get the user data from the Google token
      req.user = tokenData; // Attach user data to the request object
    }

    // If token verification is successful, proceed to the next middleware
    next();
  } catch (error) {
    res.status(404).json({ message: `${error.message}, Token is not valid` });
  }
};

const authorizeAdmin = (req, res, next) => {
  // Check if the user has the admin role
  if (req.user && req.user.isAdmin) {
    next();
  } else {
    res.status(401).json({ message: "not authorized as an admin" });
  }
};

export { verifyUser, authorizeAdmin };
